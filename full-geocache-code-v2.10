//Code on https://github.com/JoeyGE0/Geocaching-ESP32-captive-portal
//Code by JoeyGE0. intended for a geocache.
// Please give credit if possible.
//version: 2.10 (new html looks with easter eggs)
#include <WiFi.h>
#include <DNSServer.h>
#include <WebServer.h>
#include <WiFiManager.h>

IPAddress staticIP(4, 3, 2, 1); // ip address of the esp if changed it can affect load speeds. dont ask me why
IPAddress gateway(4, 3, 2, 1); //gateway of the esp if changed it can affect load speeds. dont ask me why
IPAddress subnet(255, 255, 255, 0);

DNSServer dnsServer;
WebServer server(80);

const int ledPin = 2;    // blue led on esp
const int buzzerPin = 4; // external buzzer
const int wateringressPin = 15; // for the water ingress wires

bool darkMode = false; // Dark mode flag
// put your html below or change it to your liking
const char htmlPage[] PROGMEM = R"=====(
  <!DOCTYPE html>
<html>
<head>
   <!DOCTYPE html>
<html>
<head>
  <style>
    .disable-select {
      -webkit-user-select: none; /* Safari */
      -moz-user-select: none; /* Firefox */
      -ms-user-select: none; /* IE/Edge */
      user-select: none;
    }
  </style>
</head>
<body class="disable-select">
  <!-- Your HTML content -->
  <h1 class="top-bar">
    <span style="color:#000000;">
      <span style="font-family:Arial,Helvetica,sans-serif;">
        <strong>&nbsp; &nbsp;<span style="font-size:14px;"><span style="background-color:#;" class="custom-text">JoeyGE0-GCA8GCR&nbsp;</span></span></strong>
      </span>
    </span>
    <span class="settings-button" id="settingsButton">Settings</span>
  </h1>

  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <h2 style="text-align:center"><strong><span style="font-family:Verdana,Geneva,sans-serif">Congrats on finding this webpage!</span></strong></h2>
  <p style="text-align:center"><strong><span style="font-family:Verdana,Geneva,sans-serif">Click the button below to open/close the cache</span></strong></p>
  <p style="text-align:center">&nbsp;</p>
  <p style="text-align: center;"><button class="button" id="toggleButton" type="button">Lock/unlock</button></p>
  <div class="logs-container">
    <h3 style="text-align: center;"><span style="font-family:Tahoma,Geneva,sans-serif;"><strong><u>Settings:</u></strong></span></h3>
    <div class="dark-mode-container">
      <label for="darkModeToggle">Dark Mode:</label>
      <input type="checkbox" id="darkModeToggle" name="darkModeToggle">
    </div>
    <p style="text-align:center">&nbsp;</p>
    <p style="text-align:center"><button class="button" id="restartButton" type="button" style="background-color:#FD4646;">Restart</button></p>
    <p style="text-align:center"><span class="close-button">X</span></p>
    <p class="last-updated">Resarting Kicks All Clients!</p>
    <p class="last-updated">Version: 2.10 (June 5th, 2023) | Uptime: <span id="uptime"></span></p>
  </div>
  <div class="popup-container" id="popupContainer">
    <p class="popup-message">Restarting... Your connection will be lost!</p>
  </div>
  <div class="container">
    <h3>CONGRATS, YOU FOUND MY TB!</h3>
    <p>The code is: GEAD4E </p>
    <p>Please specify where you found this *no spoilers* </p>
    <p>This will auto hide </p>
  </div>

  <script src="script.js"></script>
</body>
</html> 
  <style>
    .top-bar {
  background-color: #007bff;
  height: 50px;
}

.settings-button {
  position: absolute;
  top: 35px;
  right: 20px;
  font-size: 14px;
  font-family: Arial, Helvetica, sans-serif;
  font-weight: bold;
  color: #000000;
  cursor: pointer;
  animation: glow 4s ease-in-out infinite;
}

@keyframes glow {
  0%, 100% {
    text-shadow: 0 0 5px #ffffff, 0 0 10px #ffffff, 0 0 15px #ffffff, 0 0 20px #ffffff;
  }
  50% {
    text-shadow: 0 0 10px #ffffff, 0 0 15px #ffffff, 0 0 20px #ffffff, 0 0 25px #ffffff;
  }
}





.logs-container {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: rgba(255, 255, 255, 0.9);
  padding: 80px;
  border-radius: 10px;
  z-index: 999;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
  display: none;
}

.close-button {
  position: absolute;
  top: 10px;
  right: 10px;
  font-size: 18px;
  font-family: Arial, Helvetica, sans-serif;
  font-weight: bold;
  color: #313131;
  cursor: pointer;
  text-shadow: 0 0 5px #FF8282, 0 0 10px #FF8282, 0 0 15px #FF8282, 0 0 20px #FF8282;
}



.dark-mode-container {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 20px;
}

.dark-mode-container label {
  margin-right: 10px;
  font-weight: bold;
  font-family: Arial, Helvetica, sans-serif;
}

.last-updated {
  font-size: 10px;
  font-family: Arial, Helvetica, sans-serif;
  color: #999;
  margin-top: 20px;
  text-align: center;
}

.popup-container {
  position: fixed;
  top: 25%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: rgba(255, 255, 255, 0.9);
  padding: 40px;
  border-radius: 10px;
  z-index: 999;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
  display: none;
}

.popup-message {
  font-size: 18px;
   font-family: Arial, Helvetica, sans-serif;
   font-weight: bold;
   background-color: rgba(250, 236, 236, 0.9);
  text-align: center;
  
}

.button {
  font-size: 18px;
  padding: 12px 24px;
  border: none;
  color: white;
  background-color: #007bff;
  border-radius: 25px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
  transition: transform 0.2s ease;
}

.button:hover {
  transform: scale(1.05);
  
}

.button:active {
  transform: scale(0.95);
  
}
.top-bar .custom-text {
  position: left;
  top: 20px;
  right: 20px;
  font-size: 14px;
  font-family: Arial, Helvetica, sans-serif;
  font-weight: bold;
  color: #000000;
  cursor: pointer;
  animation: glow 4s ease-in-out infinite;
}

@keyframes glow {
  0%, 100% {
    text-shadow: 0 0 5px #ffffff, 0 0 10px #ffffff, 0 0 15px #ffffff, 0 0 20px #ffffff;
  }
  50% {
    text-shadow: 0 0 10px #ffffff, 0 0 15px #ffffff, 0 0 20px #ffffff, 0 0 25px #ffffff;
  }
}
.container {
  display: none;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: #f1f1f1;
  padding: 20px;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
}

.container h3 {
  font-size: 18px;
  font-family: Arial, Helvetica, sans-serif;
  font-weight: bold;
  margin-bottom: 10px;
}

.container p {
  font-size: 14px;
  font-family: Arial, Helvetica, sans-serif;
  margin-bottom: 5px;
}

.container p:last-child {
  margin-bottom: 0;
}
  </style>
  <script> 
    var button = document.getElementById("toggleButton");
button.addEventListener("click", function() {
  fetch('/toggle')
    .then(response => response.text())
    .then(data => {
      console.log(data);
    });
});

var settingsButton = document.getElementById("settingsButton");
var logsContainer = document.querySelector('.logs-container');
settingsButton.addEventListener("click", function() {
  logsContainer.style.display = 'block';
});

var closeButton = logsContainer.querySelector('.close-button');
closeButton.addEventListener('click', function() {
  logsContainer.style.display = 'none';
});

var darkModeToggle = document.getElementById('darkModeToggle');
darkModeToggle.addEventListener('change', function() {
  if (darkModeToggle.checked) {
    document.body.style.backgroundColor = '#000000';
    document.body.style.color = '#ffffff';
    document.querySelector('.logs-container').style.backgroundColor = '#353535';
    document.querySelector('.logs-container').style.color = '#ffffff';
    darkMode = true;
  } else {
    document.body.style.backgroundColor = '';
    document.body.style.color = '';
    document.querySelector('.logs-container').style.backgroundColor = '';
    document.querySelector('.logs-container').style.color = '';
    darkMode = false;
  }
});

var uptimeElement = document.getElementById('uptime');
setInterval(function() {
  fetch('/uptime')
    .then(response => response.text())
    .then(data => {
      var seconds = parseInt(data, 10);
      var hours = Math.floor(seconds / 3600);
      seconds %= 3600;
      var minutes = Math.floor(seconds / 60);
      seconds %= 60;
      uptimeElement.innerText = hours + 'h:' + minutes + 'm:' + seconds + 's';
    });
}, 1000);

var restartButton = document.getElementById('restartButton');
restartButton.addEventListener('click', function() {
  var popupContainer = document.getElementById('popupContainer');
  popupContainer.style.display = 'block';
  fetch('/restart')
    .then(response => response.text())
    .then(data => {
      console.log(data);
    });
});
var clickCounter = 0;
var container = document.querySelector('.container');

function openContainer() {
  clickCounter++;
  if (clickCounter >= 5) {
    container.style.display = 'block';
    customText.removeEventListener('click', openContainer);
    setTimeout(function() {
      container.style.display = 'none';
    }, 20000); // 20 seconds
  }
}

var customText = document.querySelector('.custom-text');
customText.addEventListener('click', openContainer);
  </script>
</head>
<body>
  <h1> </h1>
  <p> </p>
</body>
</html>
)=====";


int numClients = 0;
bool buzzerOn = false;

bool waterDetected = false; // Flag for water detection

unsigned long uptimeStart = 0;

void setup() {
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);  // turn off LED at the beginning
  pinMode(buzzerPin, OUTPUT);
  digitalWrite(buzzerPin, LOW);  // turn off buzzer at the beginning
  pinMode(wateringressPin, INPUT_PULLUP); // configure water ingress pin as input with internal pull-up resistor

  Serial.begin(115200);
  delay(1000);

  digitalWrite(buzzerPin, HIGH); // make a short beep
  delay(50);
  digitalWrite(buzzerPin, LOW);

  WiFi.mode(WIFI_AP);
  WiFi.softAPConfig(staticIP, gateway, subnet);
  WiFi.softAP("JoeyGE0-GCA8GCR"); //this is the AP name

  dnsServer.start(53, "*", staticIP);

  server.onNotFound([]() {
    server.send(200, "text/html", htmlPage);
  });

  server.on("/toggle", []() {
    buzzerOn = !buzzerOn;

    String logMessage = "Buzzer is ";
    logMessage += (buzzerOn ? "on" : "off");
    Serial.println(logMessage);

    digitalWrite(buzzerPin, buzzerOn ? HIGH : LOW);

    server.send(200, "text/html", htmlPage);
  });

  server.on("/uptime", []() {
    unsigned long uptime = millis() - uptimeStart;
    server.send(200, "text/plain", String(uptime / 1000));
  });

  server.on("/restart", []() {
    server.send(200, "text/plain", "Restarting ESP...");
     WiFi.softAPdisconnect(true); 
    delay(2000); // Delay to allow the response to be sent
    ESP.restart();
  });

  server.begin();


  uptimeStart = millis();

  Serial.println("GCA8GCR-A cache by JoeyGE0. These are the logs for the cache.");
  Serial.print("Cache IP Address: ");
  Serial.println(staticIP);
}

void loop() {
  dnsServer.processNextRequest();
  server.handleClient();

  int connectedClients = WiFi.softAPgetStationNum();

  // update number of clients connected and turn on LED if a new client connected
  if (connectedClients != numClients) {
    numClients = connectedClients;
    if (numClients > 0) {
      digitalWrite(ledPin, HIGH);
      Serial.print("New client connected! Total clients: ");
      Serial.println(numClients);
    } else {
      digitalWrite(ledPin, LOW);
      Serial.println("All clients disconnected.");
    }
  }

  // Check if water has been detected
  if (digitalRead(wateringressPin) == LOW && !waterDetected) {
    Serial.println("WATER INGRESS DETECTED! CONTACT JOEYGE0 ASAP!");
    
    waterDetected = true;
  }
}
